apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: minio-{{ template "aldaas.fullname" . }}
  namespace: aldaas
spec:
  dependencies:
    - eventName: backup
      eventSourceName: minio-{{ template "aldaas.fullname" . }}
      name: minio-dep
  template:
    serviceAccountName: argo-workflow
  triggers:
    - retryStrategy:
        steps: 3
      template:
        name: {{ template "aldaas.fullname" . }}-workflow-trigger
        k8s:
          operation: create
          parameters:
            - dest: spec.arguments.parameters.0.value
              src:
                dataKey: notification.0.s3.object.key
                dependencyName: minio-dep
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: minio-{{ template "aldaas.fullname" . }}-workflow-
              spec:
                arguments:
                  parameters:
                    - name: db-file
                      value: THIS_WILL_BE_REPLACED
                entrypoint: init
                templates:
                  - name: init
                    steps:
                    - - name: generate-volume
                        template: generate-volume
                    - - name: db-for-prepare-aldaas
                        template: db-for-prepare-aldaas
                        arguments:
                          parameters:
                            - name: pvc-name
                              value: '{{`{{steps.generate-volume.outputs.parameters.pvc-name}}`}}'
                    - - name: load-backup
                        template: load-backup
                        arguments:
                            parameters:
                              - name: db-ip
                                value: '{{`{{steps.db-for-prepare-aldaas.ip}}`}}'
                  - name: db-for-prepare-aldaas
                    daemon: true
                    container:
                      {{- if  .Values.application.args }}
                      command:
                        {{- range .Values.application.args }}
                          - {{ . -}}
                        {{ end }}
                      {{- end }}
                      {{- if  .Values.application.args }}
                      args:
                        {{- range .Values.application.command }}
                          - {{ . -}}
                        {{ end }}
                      {{- end }}
                      {{- if  .Values.application.env }}
                      env:
                        {{- range .Values.application.env }}
                        - name: {{ .name }}
                          value: {{ .value }}
                        {{- end }}
                      {{- end }}
                      image: "{{ .Values.application.image }}:{{ .Values.application.tag }}"                
                      readinessProbe:
                        tcpSocket:
                          port: {{ .Values.application.port }}
                      {{- with .Values.application.resources }}
                      resources:
                        {{- toYaml . | nindent 24 }}
                      {{- end }}
                    inputs:
                      parameters:
                        - name: pvc-name
                    volumes:
                      - name: workdir
                        persistentVolumeClaim:
                          claimName: '{{`{{inputs.parameters.pvc-name}}`}}'
                    volumeMounts:
                    - name: workdir
                      mountPath: {{ .Values.application.mount }}
                  - name: load-backup
                    container:
                      {{- if  .Values.restore.env }}
                      command:
                        {{- range .Values.restore.args }}
                          - {{ . -}}
                        {{ end }}
                      {{- end }}
                      {{- if  .Values.restore.command }}
                      args:
                        {{- range .Values.restore.command }}
                          - {{ . -}}
                        {{ end }}
                      {{- end }}
                      env:
                        - name: ALDAAS_HOST_DAEMON
                          value: '{{`{{inputs.parameters.db-ip}}`}}'
                        {{- range .Values.restore.env }}
                        - name: {{ .name }}
                          value: {{ .value }}
                        {{- end }}
                      image: "{{ .Values.application.image }}:{{ .Values.application.tag }}"
                      {{- with .Values.restore.resources }}
                      resources:
                        {{- toYaml . | nindent 24 }}
                      {{- end }}
                    inputs:
                      artifacts:
                      - name: database-object
                        path: /backup
                        s3:
                          endpoint: "{{.Values.s3.host}}:{{.Values.s3.post}}"
                          bucket: "{{ .Values.s3.bucket}}"
                          key: '{{`{{workflow.parameters.db-file}}`}}'
                          insecure: {{ .Values.s3.insecure}}
                          accessKeySecret:
                            name: {{ template "s3.credentials" . }}
                            key: accesskey
                          secretKeySecret:
                            name: {{ template "s3.credentials" . }}
                            key: secretkey
                      parameters:
                        - name: db-ip
                  - name: generate-volume
                    resource:
                      action: create
                      setOwnerReference: true
                      manifest: |
                        apiVersion: v1
                        kind: PersistentVolumeClaim
                        metadata:
                          generateName: pvc-backup-{{ template "aldaas.fullname" . }}-
                        spec:
                          accessModes: ['ReadWriteOnce']
                          resources:
                            requests:
                              storage: {{ .Values.storage }}
                    outputs:
                      parameters:
                        - name: pvc-name
                          valueFrom:
                            jsonPath: '{{`{.metadata.name}`}}'