apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: {{ template "aldaas.fullname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceAccountName: {{ .Values.serviceAccountName }}
  entrypoint: init
  templates:
    - name: init
      steps:
        - - name: get-last-snapshot
            template: get-last-snapshot
        - - name: create-pvc-from-snapshot
            template: create-pvc-from-snapshot
            arguments:
              parameters:
              - name: snap-name
                value: '{{`{{steps.get-last-snapshot.outputs.result}}`}}'
        - - name: create-deploment
            template: create-deploment
          - name: create-service
            template: create-service
          - name: create-metrics
            template: create-metrics
          - name: create-ingress
            template: create-ingress
          - name: wait-service
            template: wait-service
    - name: wait-service
      container:
        args:
          - while ! nc -z '{{`{{workflow.name}}`}}' {{ .Values.application.port }}; do sleep 1; done
        command:
          - sh
          - -c
        image: alpine
    - name: create-metrics
      resource:
        action: create
        setOwnerReference: true
        manifest: |
          apiVersion: monitoring.coreos.com/v1
          kind: ServiceMonitor
          metadata:
            name: '{{`{{workflow.name}}`}}'
            labels:
              aldaas: '{{`{{workflow.name}}`}}'
              helm: {{ template "aldaas.fullname" . }}
          spec:
            endpoints:
              - port: tunnel
                path: /metrics
            selector:
              matchLabels:
                aldaas: '{{`{{workflow.name}}`}}'
                helm: {{ template "aldaas.fullname" . }}
    - name: get-last-snapshot
      container:
        name: main
        image: rancher/kubectl:{{ .Values.kubectl }}
        command:
          - kubectl
        args:
          - -n
          - {{ .Release.Namespace }}
          - get
          - volumesnapshots
          - -l
          - status=ready,aldaas={{ template "aldaas.fullname" . }}
          - --sort-by=.metadata.creationTimestamp
          - -o
          - jsonpath={.items[0].metadata.name}
    - name: create-pvc-from-snapshot
      inputs:
        parameters:
          - name: snap-name
      resource:
        action: create
        setOwnerReference: true
        manifest: |
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: '{{`{{workflow.name}}`}}'
          spec:
            storageClassName: {{ .Values.rook.storageClassName }}
            dataSource:
              name: '{{`{{inputs.parameters.snap-name}}`}}'
              kind: VolumeSnapshot
              apiGroup: snapshot.storage.k8s.io
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: {{ .Values.application.storage }}
    - name: create-deploment
      resource:
        action: create
        setOwnerReference: true
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:            
            name: '{{`{{workflow.name}}`}}'
            labels:
              aldaas: '{{`{{workflow.name}}`}}'
              helm: {{ template "aldaas.fullname" . }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                aldaas: '{{`{{workflow.name}}`}}'
                helm: {{ template "aldaas.fullname" . }}
            template:
              metadata:
                labels:
                  aldaas: '{{`{{workflow.name}}`}}'
                  helm: {{ template "aldaas.fullname" . }}
              spec:
                containers:
                  - imagePullPolicy: Always
                    name: application
                    volumeMounts:
                      - name: workdir
                        mountPath: {{ .Values.application.mount }}
                    {{- if  .Values.application.args }}
                    command:
                      {{- range .Values.application.args }}
                        - {{ . -}}
                      {{ end }}
                    {{- end }}
                    {{- if  .Values.application.command }}
                    args:
                      {{- range .Values.application.command }}
                        - {{ . -}}
                      {{ end }}
                    {{- end }}
                    {{- if  .Values.application.env }}
                    env:
                      {{- range .Values.application.env }}
                      - name: {{ .name }}
                        value: {{ .value }}
                      {{- end }}
                    {{- end }}
                    image: "{{ .Values.application.image }}:{{ .Values.application.tag }}"                
                    readinessProbe:
                      tcpSocket:
                        port: {{ .Values.application.port }}
                    {{- with .Values.application.resources }}
                    resources:
                      {{- toYaml . | nindent 22 }}
                    {{- end }}
                  - imagePullPolicy: Always
                    name: tunnel
                    image: "{{ .Values.tunnel.image }}:{{ .Values.tunnel.tag }}" 
                    command:
                     - tcp-over-websocket
                    args:
                     - server
                     - -listen_ws
                     - 0.0.0.0:{{ .Values.tunnel.port }}
                     - -connect_tcp
                     - 0.0.0.0:{{ .Values.application.port }}
                    readinessProbe:
                      tcpSocket:
                        port: {{ .Values.tunnel.port }}
                  - imagePullPolicy: Always
                    name: uptime
                    image: python:alpine
                    env:
                      - name: WORKFLOW_NAME
                        value: '{{`{{workflow.name}}`}}'
                    command:
                    - sh
                    - -c
                    args:
                    - pip install prometheus_client requests && python3 -u /script/run.py && sleep infinity
                    volumeMounts:
                      - name: python-uptime-script
                        mountPath: /script
                volumes:
                  - persistentVolumeClaim:
                      claimName: '{{`{{workflow.name}}`}}'
                    name: workdir
                  - name: python-uptime-script
                    configMap:
                      name: uptime-{{ template "aldaas.fullname" . }}
    - name: create-service
      resource:
        action: create
        setOwnerReference: true
        manifest: |
          apiVersion: v1
          kind: Service
          metadata:
            name: '{{`{{workflow.name}}`}}'
            labels:
              aldaas: '{{`{{workflow.name}}`}}'
              helm: {{ template "aldaas.fullname" . }}
          spec:
            ports:
              - port: {{ .Values.application.port }}
                protocol: TCP
                name: application
                targetPort: {{ .Values.application.port }}
              - port: {{ .Values.tunnel.port }}
                protocol: TCP
                name: tunnel
                targetPort: {{ .Values.tunnel.port }}
            selector:
              aldaas: '{{`{{workflow.name}}`}}'
              helm: {{ template "aldaas.fullname" . }}
            sessionAffinity: None
            type: ClusterIP
    - name: create-ingress
      resource:
        action: create
        setOwnerReference: true
        manifest: |
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: '{{`{{workflow.name}}`}}'
            labels:
              aldaas: '{{`{{workflow.name}}`}}'
              helm: {{ template "aldaas.fullname" . }}
          spec:
            rules:
              - host: {{ .Values.domain }}
                http:
                  paths:
                    - backend:
                        service:
                          name: '{{`{{workflow.name}}`}}'
                          port:
                            number: {{ .Values.tunnel.port }}
                      path: /{{ template "aldaas.fullname" . }}/{{ .Values.tunnel.token }}/{{`{{workflow.name}}`}}
                      pathType: Prefix