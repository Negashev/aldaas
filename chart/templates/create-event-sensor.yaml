apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: minio-{{ template "aldaas.fullname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  dependencies:
    - eventName: backup
      eventSourceName: minio-{{ template "aldaas.fullname" . }}
      name: minio-dep
  template:
    serviceAccountName: {{ .Values.serviceAccountName }}
  triggers:
    - retryStrategy:
        steps: 3
      template:
        name: {{ template "aldaas.fullname" . }}-workflow-trigger
        k8s:
          operation: create
          parameters:
            - dest: spec.arguments.parameters.0.value
              src:
                dataKey: notification.0.s3.object.key
                dependencyName: minio-dep
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: minio-{{ template "aldaas.fullname" . }}-workflow-
              spec:
                arguments:
                  parameters:
                    - name: db-file
                      value: THIS_WILL_BE_REPLACED
                entrypoint: init
                podGC:
                  strategy: OnPodSuccess
                  deleteDelayDuration: 300s
                  labelSelector:
                    matchLabels:
                      should-be-deleted: "true"
                templates:
                  - name: init
                    steps:
                      - - name: load-backup
                          template: load-backup
                      - - name: create-snaphot
                          template: create-snaphot
                          arguments:
                            parameters:
                              - name: pvc-name
                                value: '{{`{{steps.load-backup.outputs.parameters.pvc-name}}`}}'
                      - - name: check-snaphot
                          template: check-snaphot
                          arguments:
                            parameters:
                              - name: snap-name
                                value: '{{`{{steps.create-snaphot.outputs.parameters.snap-name}}`}}'
                      - - name: remove-check-snaphot
                          template: remove-check-snaphot
                          arguments:
                              parameters:
                                - name: pvc-name
                                  value: '{{`{{steps.check-snaphot.outputs.parameters.pvc-name-from-snap}}`}}'
                  - name: check-snaphot
                    inputs:
                      parameters:
                        - name: snap-name
                    outputs:
                      parameters:
                        - name: pvc-name-from-snap
                          valueFrom:
                            parameter: '{{`{{steps.create-check-snaphot.outputs.parameters.pvc-name-from-snap}}`}}'
                    steps:
                      - - name: create-check-snaphot
                          template: create-check-snaphot
                          arguments:
                            parameters:
                              - name: snap-name
                                value: '{{`{{inputs.parameters.snap-name}}`}}'
                      - - name: create-check-database
                          template: db-for-aldaas
                          arguments:
                            parameters:
                              - name: pvc-name
                                value: '{{`{{steps.create-check-snaphot.outputs.parameters.pvc-name-from-snap}}`}}'
                      - - name: command-check-database
                          template: command-check-database
                          arguments:
                              parameters:
                                - name: db-ip
                                  value: '{{`{{steps.create-check-database.ip}}`}}'
                      - - name: set-status-snapshot
                          template: set-status-snapshot
                          arguments:
                              parameters:
                                - name: snap-name
                                  value: '{{`{{inputs.parameters.snap-name}}`}}'
                  - name: load-backup
                    outputs:
                      parameters:
                        - name: pvc-name
                          valueFrom:
                            parameter: '{{`{{steps.generate-volume.outputs.parameters.pvc-name}}`}}'
                    steps:
                      - - name: generate-volume
                          template: generate-volume
                      - - name: clean-volume
                          template: clean-volume
                          arguments:
                            parameters:
                              - name: pvc-name
                                value: '{{`{{steps.generate-volume.outputs.parameters.pvc-name}}`}}'
                      - - name: db-for-prepare-aldaas
                          template: db-for-aldaas
                          arguments:
                            parameters:
                              - name: pvc-name
                                value: '{{`{{steps.generate-volume.outputs.parameters.pvc-name}}`}}'
                      - - name: load-backup-to-database
                          template: load-backup-to-database
                          arguments:
                              parameters:
                                - name: db-ip
                                  value: '{{`{{steps.db-for-prepare-aldaas.ip}}`}}'
                  - name: remove-check-snaphot
                    inputs:
                      parameters:
                        - name: pvc-name
                    container:
                      image: rancher/kubectl:{{ .Values.kubectl }}
                      command:
                        - kubectl
                      args:
                        - -n
                        - {{ .Release.Namespace }}
                        - delete
                        - pvc
                        - '{{`{{inputs.parameters.pvc-name}}`}}'
                  - name: set-status-snapshot
                    inputs:
                      parameters:
                        - name: snap-name
                    container:
                      image: rancher/kubectl:{{ .Values.kubectl }}
                      command:
                        - kubectl
                      args:
                        - -n
                        - {{ .Release.Namespace }}
                        - label
                        - --overwrite
                        - volumesnapshots
                        - '{{`{{inputs.parameters.snap-name}}`}}'
                        - status=ready
                  - name: command-check-database
                    metadata:
                      labels:
                        should-be-deleted: "true"
                    container:
                      {{- if  .Values.check.args }}
                      args:
                        {{- range .Values.check.args }}
                          - {{ . -}}
                        {{ end }}
                      {{- end }}
                      {{- if  .Values.check.command }}
                      command:
                        {{- range .Values.check.command }}
                          - {{ . -}}
                        {{ end }}
                      {{- end }}
                      env:
                        - name: ALDAAS_HOST_DAEMON
                          value: '{{`{{inputs.parameters.db-ip}}`}}'
                        {{- range .Values.restore.env }}
                        - name: {{ .name }}
                          value: {{ .value }}
                        {{- end }}
                      image: "{{ .Values.application.image }}:{{ .Values.application.tag }}"
                      {{- with .Values.restore.resources }}
                      resources:
                        {{- toYaml . | nindent 24 }}
                      {{- end }}
                    inputs:
                      parameters:
                        - name: db-ip
                  - name: create-check-snaphot
                    inputs:
                      parameters:
                        - name: snap-name
                    resource:
                      action: create
                      setOwnerReference: true
                      manifest: |
                        apiVersion: v1
                        kind: PersistentVolumeClaim
                        metadata:
                          generateName: pvc-{{ template "aldaas.fullname" . }}-
                        spec:
                          storageClassName: {{ .Values.rook.storageClassName }}
                          dataSource:
                            name: '{{`{{inputs.parameters.snap-name}}`}}'
                            kind: VolumeSnapshot
                            apiGroup: snapshot.storage.k8s.io
                          accessModes:
                            - ReadWriteOnce
                          resources:
                            requests:
                              storage: {{ .Values.application.storage }}
                    outputs:
                      parameters:
                        - name: pvc-name-from-snap
                          valueFrom:
                            jsonPath: '{{`{.metadata.name}`}}'
                  - name: create-snaphot
                    inputs:
                      parameters:
                        - name: pvc-name
                    resource:
                      action: create
                      setOwnerReference: true
                      manifest: |
                        apiVersion: snapshot.storage.k8s.io/v1
                        kind: VolumeSnapshot
                        metadata:
                          generateName: snap-{{ template "aldaas.fullname" . }}-
                          labels:
                            status: check
                            backup: '{{`{{inputs.parameters.pvc-name}}`}}'
                            aldaas: {{ template "aldaas.fullname" . }}
                        spec:
                          volumeSnapshotClassName: {{ .Values.rook.volumeSnapshotClassName }}
                          source:
                            persistentVolumeClaimName: '{{`{{inputs.parameters.pvc-name}}`}}'
                    outputs:
                      parameters:
                        - name: snap-name
                          valueFrom:
                            jsonPath: '{{`{.metadata.name}`}}'
                  - name: clean-volume
                    container:
                      args:
                        - rm -rf /data/*
                      command:
                        - sh
                        - -c
                      image: alpine
                      volumeMounts:
                      - name: workdir
                        mountPath: /data
                    inputs:
                      parameters:
                        - name: pvc-name
                    volumes:
                      - name: workdir
                        persistentVolumeClaim:
                          claimName: '{{`{{inputs.parameters.pvc-name}}`}}'
                  - name: db-for-aldaas
                    metadata:
                      labels:
                        should-be-deleted: "true"
                    daemon: true
                    container:
                      volumeMounts:
                      - name: workdir
                        mountPath: {{ .Values.application.mount }}
                      {{- if  .Values.application.args }}
                      command:
                        {{- range .Values.application.args }}
                          - {{ . -}}
                        {{ end }}
                      {{- end }}
                      {{- if  .Values.application.command }}
                      args:
                        {{- range .Values.application.command }}
                          - {{ . -}}
                        {{ end }}
                      {{- end }}
                      {{- if  .Values.application.env }}
                      env:
                        {{- range .Values.application.env }}
                        - name: {{ .name }}
                          value: {{ .value }}
                        {{- end }}
                      {{- end }}
                      image: "{{ .Values.application.image }}:{{ .Values.application.tag }}"                
                      readinessProbe:
                        tcpSocket:
                          port: {{ .Values.application.port }}
                      {{- with .Values.application.resources }}
                      resources:
                        {{- toYaml . | nindent 24 }}
                      {{- end }}
                    inputs:
                      parameters:
                        - name: pvc-name
                    volumes:
                      - name: workdir
                        persistentVolumeClaim:
                          claimName: '{{`{{inputs.parameters.pvc-name}}`}}'
                  - name: load-backup-to-database
                    container:
                      {{- if  .Values.restore.args }}
                      args:
                        {{- range .Values.restore.args }}
                          - {{ . -}}
                        {{ end }}
                      {{- end }}
                      {{- if  .Values.restore.command }}
                      command:
                        {{- range .Values.restore.command }}
                          - {{ . -}}
                        {{ end }}
                      {{- end }}
                      env:
                        - name: ALDAAS_HOST_DAEMON
                          value: '{{`{{inputs.parameters.db-ip}}`}}'
                        {{- range .Values.restore.env }}
                        - name: {{ .name }}
                          value: {{ .value }}
                        {{- end }}
                      image: "{{ .Values.application.image }}:{{ .Values.application.tag }}"
                      {{- with .Values.restore.resources }}
                      resources:
                        {{- toYaml . | nindent 24 }}
                      {{- end }}
                    inputs:
                      artifacts:
                      - name: database-object
                        path: /backup.sql.gz
                        s3:
                          endpoint: "{{.Values.s3.host}}:{{.Values.s3.post}}"
                          bucket: "{{ .Values.s3.bucket}}"
                          key: '{{`{{workflow.parameters.db-file}}`}}'
                          insecure: {{ .Values.s3.insecure}}
                          accessKeySecret:
                            name: {{ template "s3.credentials" . }}
                            key: accesskey
                          secretKeySecret:
                            name: {{ template "s3.credentials" . }}
                            key: secretkey
                      parameters:
                        - name: db-ip
                  - name: generate-volume
                    metadata:
                      labels:
                        should-be-deleted: "true"
                    resource:
                      action: create
                      setOwnerReference: true
                      manifest: |
                        apiVersion: v1
                        kind: PersistentVolumeClaim
                        metadata:
                          generateName: backup-{{ template "aldaas.fullname" . }}-
                        spec:
                          storageClassName: {{ .Values.rook.storageClassName }}
                          accessModes: ['ReadWriteOnce']
                          resources:
                            requests:
                              storage: {{ .Values.application.storage }}
                    outputs:
                      parameters:
                        - name: pvc-name
                          valueFrom:
                            jsonPath: '{{`{.metadata.name}`}}'